#!/usr/bin/env ruby
name "locomotion_switcher"

import_types_from "locomotion_switcherTypes.hpp"
import_types_from "base"

##_TASK_##
task_context "Task" do
    needs_configuration

    property "config_value", "/std/string"

  ## INPUTS ##

    # From path_planning
    input_port "locomotionMode",          "locomotion_switcher/LocomotionMode"

    # From command arbiter (to overwrite mode with joystick-selected mode)
    input_port "locomotionMode_override", "locomotion_switcher/LocomotionMode"

    # From waypoint_navigation
    input_port "current_segment",         "int"
    input_port "currentWaypoint",         "base/Waypoint"
    input_port "trajectory",              "/std/vector</base/Waypoint>"

    # From Joystick or Waypoint Navigation
    input_port "motion_command",          "base/commands/Motion2D"

    # From Reconfigurable Rover
    input_port "joints_readings",         "base/samples/Joints"
    input_port "motors_readings",         "base/samples/Joints"
    input_port "pose",                    "base/samples/RigidBodyState"

    # From wheelwalking_control
    input_port "ww_joints_commands",      "base/commands/Joints"

    # From locomotion_control
    input_port "lc_joints_commands",      "base/commands/Joints"
    input_port "bema_joints",             "base/samples/Joints"

  ## OUTPUTS ##

    # To Reconfigurable Rover
    output_port "joints_commands",        "base/commands/Joints"

    # To wheelwalking_control
    output_port "ww_readings",            "base/commands/Joints"
    output_port "kill_switch",            "bool"
    output_port "resetDepJoints",         "bool"

    # To locomotion_control
    output_port "lc_readings",            "base/commands/Joints"
    output_port "lc_motion_command",      "base/commands/Motion2D"
    output_port "bema_command",           "double"
    output_port "walking_command_front",  "double"
    output_port "walking_command_rear",   "double"

    runtime_states :NO_LOCOMOTION, :LOCOMOTION_CONTROL, :WW_CONTROL

    port_driven
    #periodic 0.01
end
